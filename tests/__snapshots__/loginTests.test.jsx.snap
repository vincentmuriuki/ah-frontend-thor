// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Button /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Buttons
    options={
      Object {
        "facebook": Object {
          "className1": "btn-floating btn-fb btn-lg",
          "className2": "fa fa-facebook",
        },
        "google": Object {
          "className1": "btn-floating btn-gplus btn-lg",
          "className2": "fa fa-google-plus",
        },
        "twitter": Object {
          "className1": "btn-floating btn-tw btn-lg",
          "className2": "fa fa-twitter",
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div>
          <div
            className="form-check"
          >
            <label
              className="btn btn-outline-info"
            >
              Remember me
            </label>
            <a
              className="btn btn-outline-info"
              href="/forgot_password"
            >
              Forgot password?
            </a>
          </div>
        </div>,
        <nav
          className="blog-pagination"
        >
          <button
            className="btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0"
            type="submit"
          >
            Sign in
          </button>
        </nav>,
        <p>
          Not a member?
          <a
            href="/signup"
          >
            Register
          </a>
        </p>,
        <p>
          Or signin with
        </p>,
        Array [
          undefined,
          undefined,
          undefined,
        ],
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="form-check"
          >
            <label
              className="btn btn-outline-info"
            >
              Remember me
            </label>
            <a
              className="btn btn-outline-info"
              href="/forgot_password"
            >
              Forgot password?
            </a>
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                className="btn btn-outline-info"
              >
                Remember me
              </label>,
              <a
                className="btn btn-outline-info"
                href="/forgot_password"
              >
                Forgot password?
              </a>,
            ],
            "className": "form-check",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Remember me",
                "className": "btn btn-outline-info",
              },
              "ref": null,
              "rendered": "Remember me",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Forgot password?",
                "className": "btn btn-outline-info",
                "href": "/forgot_password",
              },
              "ref": null,
              "rendered": "Forgot password?",
              "type": "a",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            className="btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0"
            type="submit"
          >
            Sign in
          </button>,
          "className": "blog-pagination",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sign in",
            "className": "btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0",
            "type": "submit",
          },
          "ref": null,
          "rendered": "Sign in",
          "type": "button",
        },
        "type": "nav",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Not a member?",
            <a
              href="/signup"
            >
              Register
            </a>,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Not a member?",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Register",
              "href": "/signup",
            },
            "ref": null,
            "rendered": "Register",
            "type": "a",
          },
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Or signin with",
        },
        "ref": null,
        "rendered": "Or signin with",
        "type": "p",
      },
      undefined,
      undefined,
      undefined,
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div>
            <div
              className="form-check"
            >
              <label
                className="btn btn-outline-info"
              >
                Remember me
              </label>
              <a
                className="btn btn-outline-info"
                href="/forgot_password"
              >
                Forgot password?
              </a>
            </div>
          </div>,
          <nav
            className="blog-pagination"
          >
            <button
              className="btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0"
              type="submit"
            >
              Sign in
            </button>
          </nav>,
          <p>
            Not a member?
            <a
              href="/signup"
            >
              Register
            </a>
          </p>,
          <p>
            Or signin with
          </p>,
          Array [
            undefined,
            undefined,
            undefined,
          ],
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="form-check"
            >
              <label
                className="btn btn-outline-info"
              >
                Remember me
              </label>
              <a
                className="btn btn-outline-info"
                href="/forgot_password"
              >
                Forgot password?
              </a>
            </div>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  className="btn btn-outline-info"
                >
                  Remember me
                </label>,
                <a
                  className="btn btn-outline-info"
                  href="/forgot_password"
                >
                  Forgot password?
                </a>,
              ],
              "className": "form-check",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Remember me",
                  "className": "btn btn-outline-info",
                },
                "ref": null,
                "rendered": "Remember me",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Forgot password?",
                  "className": "btn btn-outline-info",
                  "href": "/forgot_password",
                },
                "ref": null,
                "rendered": "Forgot password?",
                "type": "a",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              className="btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0"
              type="submit"
            >
              Sign in
            </button>,
            "className": "blog-pagination",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign in",
              "className": "btn btn-outline-info btn-rounded my-2 waves-effect z-depth-0",
              "type": "submit",
            },
            "ref": null,
            "rendered": "Sign in",
            "type": "button",
          },
          "type": "nav",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Not a member?",
              <a
                href="/signup"
              >
                Register
              </a>,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Not a member?",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Register",
                "href": "/signup",
              },
              "ref": null,
              "rendered": "Register",
              "type": "a",
            },
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Or signin with",
          },
          "ref": null,
          "rendered": "Or signin with",
          "type": "p",
        },
        undefined,
        undefined,
        undefined,
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Forms /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Form
    auth={
      Object {
        "errors": "User with this name or password not found !",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="col-md-6 mb-3 offset-md-3"
      >
        <div
          className="text-center mb-4 wow fadeIn"
        >
          <div
            className="card"
          >
            <h5
              className="card-header unique-color-dark white-text text-center mt-0 py-4"
            >
              <strong>
                Sign in
              </strong>
            </h5>
            <div
              className="card-body px-lg-5 pt-5"
            >
              <form
                className="text-center"
                id="loginForm"
              >
                <div />
                <Input
                  id="materialLoginFormEmail"
                  innerHtml="Email"
                  type="email"
                />
                <Input
                  id="materialLoginFormPassword"
                  innerHtml="Password"
                  type="password"
                />
                <div
                  className="d-flex justify-content-around"
                />
                <Buttons />
              </form>
              <Home />
            </div>
          </div>
        </div>
      </div>,
      "className": "row",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="text-center mb-4 wow fadeIn"
        >
          <div
            className="card"
          >
            <h5
              className="card-header unique-color-dark white-text text-center mt-0 py-4"
            >
              <strong>
                Sign in
              </strong>
            </h5>
            <div
              className="card-body px-lg-5 pt-5"
            >
              <form
                className="text-center"
                id="loginForm"
              >
                <div />
                <Input
                  id="materialLoginFormEmail"
                  innerHtml="Email"
                  type="email"
                />
                <Input
                  id="materialLoginFormPassword"
                  innerHtml="Password"
                  type="password"
                />
                <div
                  className="d-flex justify-content-around"
                />
                <Buttons />
              </form>
              <Home />
            </div>
          </div>
        </div>,
        "className": "col-md-6 mb-3 offset-md-3",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="card"
          >
            <h5
              className="card-header unique-color-dark white-text text-center mt-0 py-4"
            >
              <strong>
                Sign in
              </strong>
            </h5>
            <div
              className="card-body px-lg-5 pt-5"
            >
              <form
                className="text-center"
                id="loginForm"
              >
                <div />
                <Input
                  id="materialLoginFormEmail"
                  innerHtml="Email"
                  type="email"
                />
                <Input
                  id="materialLoginFormPassword"
                  innerHtml="Password"
                  type="password"
                />
                <div
                  className="d-flex justify-content-around"
                />
                <Buttons />
              </form>
              <Home />
            </div>
          </div>,
          "className": "text-center mb-4 wow fadeIn",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h5
                className="card-header unique-color-dark white-text text-center mt-0 py-4"
              >
                <strong>
                  Sign in
                </strong>
              </h5>,
              <div
                className="card-body px-lg-5 pt-5"
              >
                <form
                  className="text-center"
                  id="loginForm"
                >
                  <div />
                  <Input
                    id="materialLoginFormEmail"
                    innerHtml="Email"
                    type="email"
                  />
                  <Input
                    id="materialLoginFormPassword"
                    innerHtml="Password"
                    type="password"
                  />
                  <div
                    className="d-flex justify-content-around"
                  />
                  <Buttons />
                </form>
                <Home />
              </div>,
            ],
            "className": "card",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <strong>
                  Sign in
                </strong>,
                "className": "card-header unique-color-dark white-text text-center mt-0 py-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Sign in",
                },
                "ref": null,
                "rendered": "Sign in",
                "type": "strong",
              },
              "type": "h5",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <form
                    className="text-center"
                    id="loginForm"
                  >
                    <div />
                    <Input
                      id="materialLoginFormEmail"
                      innerHtml="Email"
                      type="email"
                    />
                    <Input
                      id="materialLoginFormPassword"
                      innerHtml="Password"
                      type="password"
                    />
                    <div
                      className="d-flex justify-content-around"
                    />
                    <Buttons />
                  </form>,
                  <Home />,
                ],
                "className": "card-body px-lg-5 pt-5",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div />,
                      <Input
                        id="materialLoginFormEmail"
                        innerHtml="Email"
                        type="email"
                      />,
                      <Input
                        id="materialLoginFormPassword"
                        innerHtml="Password"
                        type="password"
                      />,
                      <div
                        className="d-flex justify-content-around"
                      />,
                      <Buttons />,
                    ],
                    "className": "text-center",
                    "id": "loginForm",
                    "onSubmit": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "id": "materialLoginFormEmail",
                        "innerHtml": "Email",
                        "onChange": undefined,
                        "type": "email",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "id": "materialLoginFormPassword",
                        "innerHtml": "Password",
                        "onChange": undefined,
                        "type": "password",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "d-flex justify-content-around",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "options": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "form",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="col-md-6 mb-3 offset-md-3"
        >
          <div
            className="text-center mb-4 wow fadeIn"
          >
            <div
              className="card"
            >
              <h5
                className="card-header unique-color-dark white-text text-center mt-0 py-4"
              >
                <strong>
                  Sign in
                </strong>
              </h5>
              <div
                className="card-body px-lg-5 pt-5"
              >
                <form
                  className="text-center"
                  id="loginForm"
                >
                  <div />
                  <Input
                    id="materialLoginFormEmail"
                    innerHtml="Email"
                    type="email"
                  />
                  <Input
                    id="materialLoginFormPassword"
                    innerHtml="Password"
                    type="password"
                  />
                  <div
                    className="d-flex justify-content-around"
                  />
                  <Buttons />
                </form>
                <Home />
              </div>
            </div>
          </div>
        </div>,
        "className": "row",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="text-center mb-4 wow fadeIn"
          >
            <div
              className="card"
            >
              <h5
                className="card-header unique-color-dark white-text text-center mt-0 py-4"
              >
                <strong>
                  Sign in
                </strong>
              </h5>
              <div
                className="card-body px-lg-5 pt-5"
              >
                <form
                  className="text-center"
                  id="loginForm"
                >
                  <div />
                  <Input
                    id="materialLoginFormEmail"
                    innerHtml="Email"
                    type="email"
                  />
                  <Input
                    id="materialLoginFormPassword"
                    innerHtml="Password"
                    type="password"
                  />
                  <div
                    className="d-flex justify-content-around"
                  />
                  <Buttons />
                </form>
                <Home />
              </div>
            </div>
          </div>,
          "className": "col-md-6 mb-3 offset-md-3",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="card"
            >
              <h5
                className="card-header unique-color-dark white-text text-center mt-0 py-4"
              >
                <strong>
                  Sign in
                </strong>
              </h5>
              <div
                className="card-body px-lg-5 pt-5"
              >
                <form
                  className="text-center"
                  id="loginForm"
                >
                  <div />
                  <Input
                    id="materialLoginFormEmail"
                    innerHtml="Email"
                    type="email"
                  />
                  <Input
                    id="materialLoginFormPassword"
                    innerHtml="Password"
                    type="password"
                  />
                  <div
                    className="d-flex justify-content-around"
                  />
                  <Buttons />
                </form>
                <Home />
              </div>
            </div>,
            "className": "text-center mb-4 wow fadeIn",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h5
                  className="card-header unique-color-dark white-text text-center mt-0 py-4"
                >
                  <strong>
                    Sign in
                  </strong>
                </h5>,
                <div
                  className="card-body px-lg-5 pt-5"
                >
                  <form
                    className="text-center"
                    id="loginForm"
                  >
                    <div />
                    <Input
                      id="materialLoginFormEmail"
                      innerHtml="Email"
                      type="email"
                    />
                    <Input
                      id="materialLoginFormPassword"
                      innerHtml="Password"
                      type="password"
                    />
                    <div
                      className="d-flex justify-content-around"
                    />
                    <Buttons />
                  </form>
                  <Home />
                </div>,
              ],
              "className": "card",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <strong>
                    Sign in
                  </strong>,
                  "className": "card-header unique-color-dark white-text text-center mt-0 py-4",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Sign in",
                  },
                  "ref": null,
                  "rendered": "Sign in",
                  "type": "strong",
                },
                "type": "h5",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <form
                      className="text-center"
                      id="loginForm"
                    >
                      <div />
                      <Input
                        id="materialLoginFormEmail"
                        innerHtml="Email"
                        type="email"
                      />
                      <Input
                        id="materialLoginFormPassword"
                        innerHtml="Password"
                        type="password"
                      />
                      <div
                        className="d-flex justify-content-around"
                      />
                      <Buttons />
                    </form>,
                    <Home />,
                  ],
                  "className": "card-body px-lg-5 pt-5",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div />,
                        <Input
                          id="materialLoginFormEmail"
                          innerHtml="Email"
                          type="email"
                        />,
                        <Input
                          id="materialLoginFormPassword"
                          innerHtml="Password"
                          type="password"
                        />,
                        <div
                          className="d-flex justify-content-around"
                        />,
                        <Buttons />,
                      ],
                      "className": "text-center",
                      "id": "loginForm",
                      "onSubmit": undefined,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "id": "materialLoginFormEmail",
                          "innerHtml": "Email",
                          "onChange": undefined,
                          "type": "email",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "id": "materialLoginFormPassword",
                          "innerHtml": "Password",
                          "onChange": undefined,
                          "type": "password",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "d-flex justify-content-around",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "options": undefined,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": "form",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Header /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Header />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <nav
        className="navbar fixed-top navbar-expand-lg navbar-dark unique-color-dark scrolling-navbar"
      >
        <div
          className="container"
        >
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="navbar-brand"
            to="/home"
          >
            <strong>
              Author's Haven
            </strong>
          </NavLink>
          <button
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
            className="navbar-toggler"
            data-target="#navbarSupportedContent"
            data-toggle="collapse"
            type="button"
          >
            <span
              className="navbar-toggler-icon"
            />
          </button>
          <div
            className="collapse navbar-collapse"
            id="navbarSupportedContent"
          >
            <ul
              className="navbar-nav ml-auto"
            >
              <li
                className="nav-item"
              >
                <withRouter(SearchForm) />
              </li>
              <li>
                <NavLink
                  activeClassName="active"
                  aria-current="page"
                  className="navbar-brand"
                  to="/Profile"
                >
                  <Connect(ProfileImage) />
                </NavLink>
              </li>
            </ul>
          </div>
        </div>
      </nav>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        >
          <NavLink
            activeClassName="active"
            aria-current="page"
            className="navbar-brand"
            to="/home"
          >
            <strong>
              Author's Haven
            </strong>
          </NavLink>
          <button
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
            className="navbar-toggler"
            data-target="#navbarSupportedContent"
            data-toggle="collapse"
            type="button"
          >
            <span
              className="navbar-toggler-icon"
            />
          </button>
          <div
            className="collapse navbar-collapse"
            id="navbarSupportedContent"
          >
            <ul
              className="navbar-nav ml-auto"
            >
              <li
                className="nav-item"
              >
                <withRouter(SearchForm) />
              </li>
              <li>
                <NavLink
                  activeClassName="active"
                  aria-current="page"
                  className="navbar-brand"
                  to="/Profile"
                >
                  <Connect(ProfileImage) />
                </NavLink>
              </li>
            </ul>
          </div>
        </div>,
        "className": "navbar fixed-top navbar-expand-lg navbar-dark unique-color-dark scrolling-navbar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <NavLink
              activeClassName="active"
              aria-current="page"
              className="navbar-brand"
              to="/home"
            >
              <strong>
                Author's Haven
              </strong>
            </NavLink>,
            <button
              aria-controls="navbarSupportedContent"
              aria-expanded="false"
              aria-label="Toggle navigation"
              className="navbar-toggler"
              data-target="#navbarSupportedContent"
              data-toggle="collapse"
              type="button"
            >
              <span
                className="navbar-toggler-icon"
              />
            </button>,
            <div
              className="collapse navbar-collapse"
              id="navbarSupportedContent"
            >
              <ul
                className="navbar-nav ml-auto"
              >
                <li
                  className="nav-item"
                >
                  <withRouter(SearchForm) />
                </li>
                <li>
                  <NavLink
                    activeClassName="active"
                    aria-current="page"
                    className="navbar-brand"
                    to="/Profile"
                  >
                    <Connect(ProfileImage) />
                  </NavLink>
                </li>
              </ul>
            </div>,
          ],
          "className": "container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "aria-current": "page",
              "children": <strong>
                Author's Haven
              </strong>,
              "className": "navbar-brand",
              "to": "/home",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Author's Haven",
              },
              "ref": null,
              "rendered": "Author's Haven",
              "type": "strong",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "aria-controls": "navbarSupportedContent",
              "aria-expanded": "false",
              "aria-label": "Toggle navigation",
              "children": <span
                className="navbar-toggler-icon"
              />,
              "className": "navbar-toggler",
              "data-target": "#navbarSupportedContent",
              "data-toggle": "collapse",
              "type": "button",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "navbar-toggler-icon",
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <ul
                className="navbar-nav ml-auto"
              >
                <li
                  className="nav-item"
                >
                  <withRouter(SearchForm) />
                </li>
                <li>
                  <NavLink
                    activeClassName="active"
                    aria-current="page"
                    className="navbar-brand"
                    to="/Profile"
                  >
                    <Connect(ProfileImage) />
                  </NavLink>
                </li>
              </ul>,
              "className": "collapse navbar-collapse",
              "id": "navbarSupportedContent",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <li
                    className="nav-item"
                  >
                    <withRouter(SearchForm) />
                  </li>,
                  <li>
                    <NavLink
                      activeClassName="active"
                      aria-current="page"
                      className="navbar-brand"
                      to="/Profile"
                    >
                      <Connect(ProfileImage) />
                    </NavLink>
                  </li>,
                ],
                "className": "navbar-nav ml-auto",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <withRouter(SearchForm) />,
                    "className": "nav-item",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "li",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <NavLink
                      activeClassName="active"
                      aria-current="page"
                      className="navbar-brand"
                      to="/Profile"
                    >
                      <Connect(ProfileImage) />
                    </NavLink>,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "activeClassName": "active",
                      "aria-current": "page",
                      "children": <Connect(ProfileImage) />,
                      "className": "navbar-brand",
                      "to": "/Profile",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": "li",
                },
              ],
              "type": "ul",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "nav",
    },
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <nav
          className="navbar fixed-top navbar-expand-lg navbar-dark unique-color-dark scrolling-navbar"
        >
          <div
            className="container"
          >
            <NavLink
              activeClassName="active"
              aria-current="page"
              className="navbar-brand"
              to="/home"
            >
              <strong>
                Author's Haven
              </strong>
            </NavLink>
            <button
              aria-controls="navbarSupportedContent"
              aria-expanded="false"
              aria-label="Toggle navigation"
              className="navbar-toggler"
              data-target="#navbarSupportedContent"
              data-toggle="collapse"
              type="button"
            >
              <span
                className="navbar-toggler-icon"
              />
            </button>
            <div
              className="collapse navbar-collapse"
              id="navbarSupportedContent"
            >
              <ul
                className="navbar-nav ml-auto"
              >
                <li
                  className="nav-item"
                >
                  <withRouter(SearchForm) />
                </li>
                <li>
                  <NavLink
                    activeClassName="active"
                    aria-current="page"
                    className="navbar-brand"
                    to="/Profile"
                  >
                    <Connect(ProfileImage) />
                  </NavLink>
                </li>
              </ul>
            </div>
          </div>
        </nav>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="container"
          >
            <NavLink
              activeClassName="active"
              aria-current="page"
              className="navbar-brand"
              to="/home"
            >
              <strong>
                Author's Haven
              </strong>
            </NavLink>
            <button
              aria-controls="navbarSupportedContent"
              aria-expanded="false"
              aria-label="Toggle navigation"
              className="navbar-toggler"
              data-target="#navbarSupportedContent"
              data-toggle="collapse"
              type="button"
            >
              <span
                className="navbar-toggler-icon"
              />
            </button>
            <div
              className="collapse navbar-collapse"
              id="navbarSupportedContent"
            >
              <ul
                className="navbar-nav ml-auto"
              >
                <li
                  className="nav-item"
                >
                  <withRouter(SearchForm) />
                </li>
                <li>
                  <NavLink
                    activeClassName="active"
                    aria-current="page"
                    className="navbar-brand"
                    to="/Profile"
                  >
                    <Connect(ProfileImage) />
                  </NavLink>
                </li>
              </ul>
            </div>
          </div>,
          "className": "navbar fixed-top navbar-expand-lg navbar-dark unique-color-dark scrolling-navbar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <NavLink
                activeClassName="active"
                aria-current="page"
                className="navbar-brand"
                to="/home"
              >
                <strong>
                  Author's Haven
                </strong>
              </NavLink>,
              <button
                aria-controls="navbarSupportedContent"
                aria-expanded="false"
                aria-label="Toggle navigation"
                className="navbar-toggler"
                data-target="#navbarSupportedContent"
                data-toggle="collapse"
                type="button"
              >
                <span
                  className="navbar-toggler-icon"
                />
              </button>,
              <div
                className="collapse navbar-collapse"
                id="navbarSupportedContent"
              >
                <ul
                  className="navbar-nav ml-auto"
                >
                  <li
                    className="nav-item"
                  >
                    <withRouter(SearchForm) />
                  </li>
                  <li>
                    <NavLink
                      activeClassName="active"
                      aria-current="page"
                      className="navbar-brand"
                      to="/Profile"
                    >
                      <Connect(ProfileImage) />
                    </NavLink>
                  </li>
                </ul>
              </div>,
            ],
            "className": "container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "activeClassName": "active",
                "aria-current": "page",
                "children": <strong>
                  Author's Haven
                </strong>,
                "className": "navbar-brand",
                "to": "/home",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Author's Haven",
                },
                "ref": null,
                "rendered": "Author's Haven",
                "type": "strong",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "aria-controls": "navbarSupportedContent",
                "aria-expanded": "false",
                "aria-label": "Toggle navigation",
                "children": <span
                  className="navbar-toggler-icon"
                />,
                "className": "navbar-toggler",
                "data-target": "#navbarSupportedContent",
                "data-toggle": "collapse",
                "type": "button",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "navbar-toggler-icon",
                },
                "ref": null,
                "rendered": null,
                "type": "span",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <ul
                  className="navbar-nav ml-auto"
                >
                  <li
                    className="nav-item"
                  >
                    <withRouter(SearchForm) />
                  </li>
                  <li>
                    <NavLink
                      activeClassName="active"
                      aria-current="page"
                      className="navbar-brand"
                      to="/Profile"
                    >
                      <Connect(ProfileImage) />
                    </NavLink>
                  </li>
                </ul>,
                "className": "collapse navbar-collapse",
                "id": "navbarSupportedContent",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <li
                      className="nav-item"
                    >
                      <withRouter(SearchForm) />
                    </li>,
                    <li>
                      <NavLink
                        activeClassName="active"
                        aria-current="page"
                        className="navbar-brand"
                        to="/Profile"
                      >
                        <Connect(ProfileImage) />
                      </NavLink>
                    </li>,
                  ],
                  "className": "navbar-nav ml-auto",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <withRouter(SearchForm) />,
                      "className": "nav-item",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "li",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <NavLink
                        activeClassName="active"
                        aria-current="page"
                        className="navbar-brand"
                        to="/Profile"
                      >
                        <Connect(ProfileImage) />
                      </NavLink>,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "activeClassName": "active",
                        "aria-current": "page",
                        "children": <Connect(ProfileImage) />,
                        "className": "navbar-brand",
                        "to": "/Profile",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {},
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                    "type": "li",
                  },
                ],
                "type": "ul",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "nav",
      },
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Home /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <HomeHeaderSection />,
        <Connect(ArticleDetails) />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <HomeHeaderSection />,
          <Connect(ArticleDetails) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Inputs /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Input
    required={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <div
        className="md-form"
      >
        <input
          className="form-control"
        />
        <label />
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            className="form-control"
          />,
          <label />,
        ],
        "className": "md-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "form-control",
            "id": undefined,
            "onChange": undefined,
            "type": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "htmlFor": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "label",
        },
      ],
      "type": "div",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          className="md-form"
        >
          <input
            className="form-control"
          />
          <label />
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              className="form-control"
            />,
            <label />,
          ],
          "className": "md-form",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "form-control",
              "id": undefined,
              "onChange": undefined,
              "type": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
              "htmlFor": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "label",
          },
        ],
        "type": "div",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Login /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="container"
      >
        <section
          className="mt-4"
        >
          <Form
            onChangeEmail={[Function]}
            onChangePassword={[Function]}
            onSubmit={[Function]}
            options={
              Object {
                "facebook": Object {
                  "className1": "btn-floating btn-fb btn-lg",
                  "className2": "fa fa-facebook",
                },
                "google": Object {
                  "className1": "btn-floating btn-gplus btn-lg",
                  "className2": "fa fa-google-plus",
                },
                "twitter": Object {
                  "className1": "btn-floating btn-tw btn-lg",
                  "className2": "fa fa-twitter",
                },
              }
            }
          />
        </section>
      </div>,
      "className": "mt-5 pt-5",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <section
          className="mt-4"
        >
          <Form
            onChangeEmail={[Function]}
            onChangePassword={[Function]}
            onSubmit={[Function]}
            options={
              Object {
                "facebook": Object {
                  "className1": "btn-floating btn-fb btn-lg",
                  "className2": "fa fa-facebook",
                },
                "google": Object {
                  "className1": "btn-floating btn-gplus btn-lg",
                  "className2": "fa fa-google-plus",
                },
                "twitter": Object {
                  "className1": "btn-floating btn-tw btn-lg",
                  "className2": "fa fa-twitter",
                },
              }
            }
          />
        </section>,
        "className": "container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Form
            onChangeEmail={[Function]}
            onChangePassword={[Function]}
            onSubmit={[Function]}
            options={
              Object {
                "facebook": Object {
                  "className1": "btn-floating btn-fb btn-lg",
                  "className2": "fa fa-facebook",
                },
                "google": Object {
                  "className1": "btn-floating btn-gplus btn-lg",
                  "className2": "fa fa-google-plus",
                },
                "twitter": Object {
                  "className1": "btn-floating btn-tw btn-lg",
                  "className2": "fa fa-twitter",
                },
              }
            }
          />,
          "className": "mt-4",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "auth": undefined,
            "onChangeEmail": [Function],
            "onChangePassword": [Function],
            "onSubmit": [Function],
            "options": Object {
              "facebook": Object {
                "className1": "btn-floating btn-fb btn-lg",
                "className2": "fa fa-facebook",
              },
              "google": Object {
                "className1": "btn-floating btn-gplus btn-lg",
                "className2": "fa fa-google-plus",
              },
              "twitter": Object {
                "className1": "btn-floating btn-tw btn-lg",
                "className2": "fa fa-twitter",
              },
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "section",
      },
      "type": "div",
    },
    "type": "main",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="container"
        >
          <section
            className="mt-4"
          >
            <Form
              onChangeEmail={[Function]}
              onChangePassword={[Function]}
              onSubmit={[Function]}
              options={
                Object {
                  "facebook": Object {
                    "className1": "btn-floating btn-fb btn-lg",
                    "className2": "fa fa-facebook",
                  },
                  "google": Object {
                    "className1": "btn-floating btn-gplus btn-lg",
                    "className2": "fa fa-google-plus",
                  },
                  "twitter": Object {
                    "className1": "btn-floating btn-tw btn-lg",
                    "className2": "fa fa-twitter",
                  },
                }
              }
            />
          </section>
        </div>,
        "className": "mt-5 pt-5",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <section
            className="mt-4"
          >
            <Form
              onChangeEmail={[Function]}
              onChangePassword={[Function]}
              onSubmit={[Function]}
              options={
                Object {
                  "facebook": Object {
                    "className1": "btn-floating btn-fb btn-lg",
                    "className2": "fa fa-facebook",
                  },
                  "google": Object {
                    "className1": "btn-floating btn-gplus btn-lg",
                    "className2": "fa fa-google-plus",
                  },
                  "twitter": Object {
                    "className1": "btn-floating btn-tw btn-lg",
                    "className2": "fa fa-twitter",
                  },
                }
              }
            />
          </section>,
          "className": "container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Form
              onChangeEmail={[Function]}
              onChangePassword={[Function]}
              onSubmit={[Function]}
              options={
                Object {
                  "facebook": Object {
                    "className1": "btn-floating btn-fb btn-lg",
                    "className2": "fa fa-facebook",
                  },
                  "google": Object {
                    "className1": "btn-floating btn-gplus btn-lg",
                    "className2": "fa fa-google-plus",
                  },
                  "twitter": Object {
                    "className1": "btn-floating btn-tw btn-lg",
                    "className2": "fa fa-twitter",
                  },
                }
              }
            />,
            "className": "mt-4",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "auth": undefined,
              "onChangeEmail": [Function],
              "onChangePassword": [Function],
              "onSubmit": [Function],
              "options": Object {
                "facebook": Object {
                  "className1": "btn-floating btn-fb btn-lg",
                  "className2": "fa fa-facebook",
                },
                "google": Object {
                  "className1": "btn-floating btn-gplus btn-lg",
                  "className2": "fa fa-google-plus",
                },
                "twitter": Object {
                  "className1": "btn-floating btn-tw btn-lg",
                  "className2": "fa fa-twitter",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "section",
        },
        "type": "div",
      },
      "type": "main",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<SocialAuthButton /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SocialAuthButtons />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <a>
        <i />
      </a>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <i />,
        "className": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "i",
      },
      "type": "a",
    },
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <a>
          <i />
        </a>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <i />,
          "className": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "i",
        },
        "type": "a",
      },
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
